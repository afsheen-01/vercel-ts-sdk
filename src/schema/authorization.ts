// Generated by ts-to-zod
import { z } from "zod";

export const authTokenSchema = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  origin: z.string().optional(),
  scopes: z
    .array(
      z.union([
        z.object({
          type: z.literal("user"),
          origin: z.union([
            z.literal("saml"),
            z.literal("github"),
            z.literal("gitlab"),
            z.literal("bitbucket"),
            z.literal("email"),
            z.literal("manual"),
          ]),
          createdAt: z.number(),
          expiresAt: z.number().optional(),
        }),
        z.object({
          type: z.literal("team"),
          teamId: z.string(),
          origin: z.union([
            z.literal("saml"),
            z.literal("github"),
            z.literal("gitlab"),
            z.literal("bitbucket"),
            z.literal("email"),
            z.literal("manual"),
          ]),
          createdAt: z.number(),
          expiresAt: z.number().optional(),
        }),
      ])
    )
    .optional(),
  expiresAt: z.number().optional(),
  activeAt: z.number(),
  createdAt: z.number(),
});

export const createAuthTokenResponseSchema = z.object({
  token: authTokenSchema,
  bearerToken: z.string(),
});

export const createAuthTokenParamsSchema = z.object({
  name: z.string(),
  expiresAt: z.number().optional(),
  teamId: z.string().optional(),
});
