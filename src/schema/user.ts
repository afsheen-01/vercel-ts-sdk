// Generated by ts-to-zod
import { z } from "zod";

export const authUserSchema = z.object({
  createdAt: z.number(),
  softBlock: z
    .object({
      blockedAt: z.number(),
      reason: z.union([
        z.literal("FAIR_USE_LIMITS_EXCEEDED"),
        z.literal("ENTERPRISE_TRIAL_ENDED"),
        z.literal("BLOCKED_FOR_PLATFORM_ABUSE"),
        z.literal("UNPAID_INVOICE"),
        z.literal("SUBSCRIPTION_EXPIRED"),
        z.literal("SUBSCRIPTION_CANCELED"),
      ]),
    })
    .nullable(),
  billing: z
    .object({
      currency: z.union([z.literal("usd"), z.literal("eur")]).optional(),
      addons: z
        .array(
          z.union([
            z.literal("custom-deployment-suffix"),
            z.literal("live-support"),
          ])
        )
        .optional()
        .nullable(),
      cancelation: z.number().optional().nullable(),
      period: z
        .object({
          start: z.number(),
          end: z.number(),
        })
        .nullable(),
      contract: z
        .object({
          start: z.number(),
          end: z.number(),
        })
        .optional()
        .nullable(),
      plan: z.union([
        z.literal("hobby"),
        z.literal("enterprise"),
        z.literal("pro"),
      ]),
      platform: z
        .union([z.literal("stripe"), z.literal("stripeTestMode")])
        .optional(),
      programType: z
        .union([z.literal("startup"), z.literal("agency")])
        .optional(),
      trial: z
        .object({
          start: z.number(),
          end: z.number(),
        })
        .optional()
        .nullable(),
      email: z.string().optional().nullable(),
      tax: z
        .object({
          type: z.string(),
          id: z.string(),
        })
        .optional()
        .nullable(),
      language: z.string().optional().nullable(),
      address: z
        .object({
          line1: z.string(),
          line2: z.string().optional(),
          postalCode: z.string().optional(),
          city: z.string().optional(),
          country: z.string().optional(),
          state: z.string().optional(),
        })
        .optional()
        .nullable(),
      name: z.string().optional().nullable(),
      overdue: z.boolean().optional().nullable(),
      invoiceItems: z
        .object({
          pro: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          enterprise: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          concurrentBuilds: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          saml: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          teamSeats: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          customCerts: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          previewDeploymentSuffix: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          passwordProtection: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          ssoProtection: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          analytics: z
            .object({
              price: z.number(),
              quantity: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
              createdAt: z.number().optional(),
              frequency: z
                .object({
                  interval: z.literal("month"),
                  intervalCount: z.union([
                    z.literal(1),
                    z.literal(3),
                    z.literal(2),
                    z.literal(6),
                    z.literal(12),
                  ]),
                })
                .optional(),
            })
            .optional(),
          analyticsUsage: z
            .object({
              price: z.number(),
              batch: z.number(),
              threshold: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
            })
            .optional(),
          bandwidth: z
            .object({
              price: z.number(),
              batch: z.number(),
              threshold: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
            })
            .optional(),
          builds: z
            .object({
              price: z.number(),
              batch: z.number(),
              threshold: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
            })
            .optional(),
          serverlessFunctionExecution: z
            .object({
              price: z.number(),
              batch: z.number(),
              threshold: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
            })
            .optional(),
          sourceImages: z
            .object({
              price: z.number(),
              batch: z.number(),
              threshold: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
            })
            .optional(),
          artifacts: z
            .object({
              price: z.number(),
              batch: z.number(),
              threshold: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
            })
            .optional(),
          edgeMiddlewareInvocations: z
            .object({
              price: z.number(),
              batch: z.number(),
              threshold: z.number(),
              name: z.string().optional(),
              hidden: z.boolean(),
            })
            .optional(),
        })
        .optional()
        .nullable(),
      invoiceSettings: z
        .object({
          footer: z.string().optional(),
        })
        .optional(),
      subscriptions: z
        .array(
          z.object({
            id: z.string(),
            trial: z
              .object({
                start: z.number(),
                end: z.number(),
              })
              .nullable(),
            period: z.object({
              start: z.number(),
              end: z.number(),
            }),
            frequency: z.object({
              interval: z.union([
                z.literal("month"),
                z.literal("day"),
                z.literal("week"),
                z.literal("year"),
              ]),
              intervalCount: z.number(),
            }),
            discount: z
              .object({
                id: z.string(),
                coupon: z.object({
                  id: z.string(),
                  name: z.string().nullable(),
                  amountOff: z.number().nullable(),
                  percentageOff: z.number().nullable(),
                  durationInMonths: z.number().nullable(),
                  duration: z.union([
                    z.literal("forever"),
                    z.literal("repeating"),
                    z.literal("once"),
                  ]),
                }),
              })
              .nullable(),
            items: z.array(
              z.object({
                id: z.string(),
                priceId: z.string(),
                productId: z.string(),
                amount: z.number(),
                quantity: z.number(),
              })
            ),
          })
        )
        .optional()
        .nullable(),
      controls: z
        .object({
          analyticsSampleRateInPercent: z.number().optional().nullable(),
          analyticsSpendLimitInDollars: z.number().optional().nullable(),
        })
        .optional()
        .nullable(),
      purchaseOrder: z.string().optional().nullable(),
      status: z
        .union([
          z.literal("active"),
          z.literal("canceled"),
          z.literal("trialing"),
          z.literal("overdue"),
          z.literal("expired"),
        ])
        .optional(),
      pricingExperiment: z.literal("august-2022").optional(),
    })
    .nullable(),
  resourceConfig: z.object({
    nodeType: z.string().optional(),
    concurrentBuilds: z.number().optional(),
    awsAccountType: z.string().optional(),
    awsAccountIds: z.array(z.string()).optional(),
    cfZoneName: z.string().optional(),
  }),
  stagingPrefix: z.string(),
  activeDashboardViews: z
    .array(
      z.object({
        scopeId: z.string(),
        viewPreference: z.union([z.literal("cards"), z.literal("list")]),
      })
    )
    .optional(),
  importFlowGitNamespace: z.union([z.string(), z.number()]).optional(),
  importFlowGitNamespaceId: z.union([z.string(), z.number()]).optional(),
  importFlowGitProvider: z
    .union([z.literal("github"), z.literal("gitlab"), z.literal("bitbucket")])
    .optional(),
  preferredScopesAndGitNamespaces: z
    .array(
      z.object({
        scopeId: z.string(),
        gitNamespaceId: z.union([z.string(), z.number()]),
      })
    )
    .optional(),
  dismissedToasts: z
    .array(
      z.object({
        name: z.string(),
        dismissals: z.array(
          z.object({
            scopeId: z.string(),
            createdAt: z.number(),
          })
        ),
      })
    )
    .optional(),
  hasTrialAvailable: z.boolean(),
  remoteCaching: z
    .object({
      enabled: z.boolean().optional(),
    })
    .optional(),
  id: z.string(),
  email: z.string(),
  name: z.string().nullable(),
  username: z.string(),
  avatar: z.string().nullable(),
});

export const authUserLimitedSchema = z.object({
  limited: z.boolean(),
  id: z.string(),
  email: z.string(),
  name: z.string().nullable(),
  username: z.string(),
  avatar: z.string().nullable(),
});

export const userResponseSchema = z.object({
  user: z.union([authUserSchema, authUserLimitedSchema]),
});

export const userEventSchema = z.object({
  id: z.string(),
  text: z.string(),
  entities: z.array(
    z.object({
      type: z.union([
        z.literal("target"),
        z.literal("author"),
        z.literal("bitbucket_login"),
        z.literal("bold"),
        z.literal("deployment_host"),
        z.literal("dns_record"),
        z.literal("git_link"),
        z.literal("github_login"),
        z.literal("gitlab_login"),
        z.literal("hook_name"),
        z.literal("integration"),
        z.literal("edge-config"),
        z.literal("link"),
        z.literal("project_name"),
        z.literal("scaling_rules"),
        z.literal("env_var_name"),
        z.literal("system"),
      ]),
      start: z.number(),
      end: z.number(),
    })
  ),
  createdAt: z.number(),
  user: z
    .object({
      avatar: z.string(),
      email: z.string(),
      slug: z.string().optional(),
      uid: z.string(),
      username: z.string(),
    })
    .optional(),
  userId: z.string(),
});

export const userEventsResponseSchema = z.object({
  events: z.array(userEventSchema),
});

export const typeSchema = z.union([
  z.literal("target"),
  z.literal("author"),
  z.literal("bitbucket_login"),
  z.literal("bold"),
  z.literal("deployment_host"),
  z.literal("dns_record"),
  z.literal("git_link"),
  z.literal("github_login"),
  z.literal("gitlab_login"),
  z.literal("hook_name"),
  z.literal("integration"),
  z.literal("edge-config"),
  z.literal("link"),
  z.literal("project_name"),
  z.literal("scaling_rules"),
  z.literal("env_var_name"),
  z.literal("system"),
]);

export const userEventParamsSchema = z.object({
  limit: z.number().optional(),
  since: z.string().optional(),
  teamID: z.string().optional(),
  types: z.array(typeSchema).optional(),
  until: z.string().optional(),
  userId: z.string().optional(),
});

export const userDeletionReasonSchema = z.object({
  description: z.string(),
  slug: z.string(),
});
